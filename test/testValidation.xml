<?xml version="1.0" encoding="UTF-8"?>
<tests>
    <test>
        <description>Array with one string</description>
        <matlab>{'foo'}</matlab>
        <schema>{ "type": "object" }</schema>
        <json>["foo"]</json>
        <errors>{'' 'does not match type object' '[array]'}</errors>
    </test>
    <test>
        <description>Row vector with NaNs</description>
        <matlab>[NaN 1]</matlab>
        <schema>
            { "type": "array",
              "items": [
                { "type": "number" },
                { "type": "null"}]
            }
        </schema>
        <json>[null,1]</json>
        <errors>
            {'/0' 'does not match type number' 'NaN'}
            {'/1' 'does not match type null' '1'}
        </errors>
    </test>
    <test>
        <description>Object Keywords</description>
        <matlab>struct('foo', 1)</matlab>
        <json>{"foo":1}</json>
        <schema>
            {
                "type": "object",
                "required": ["bar"],
                "minProperties": 2,
                "maxProperties": 0
            }
        </schema>
        
        <errors>
            {'' 'is missing required field bar' '{object}'}
            {'' 'has less than 2 properties' '{object}'}
            {'' 'has more than 0 properties' '{object}'}
        </errors>
    </test>
    <test>
        <description>Number Keywords</description>
        <matlab>
            [1, 1, 1, 1, 5, 9, 1, 1.5]
        </matlab>
        <json>
            [1, 1, 1, 1, 5, 9, 1, 1.5]
        </json>
        <schema>
            {
                "type": "array",
                "items": [
                    { "type": "number", "minimum": 1 },
                    { "type": "number", "minimum": 1, "exclusiveMinimum": true },
                    { "type": "number", "maximum": 1 },
                    { "type": "number", "maximum": 1, "exclusiveMaximum": true },
                    { "type": "number", "multipleOf": 3 },
                    { "type": "number", "multipleOf": 3 },
                    { "type": "integer" },
                    { "type": "integer" }
                ]
            }
        </schema>
        <errors>
            {'/1' 'violates minimum 1' '1'}
            {'/3' 'violates maximum 1' '1'}
            {'/4' 'is not a multiple of 3' '5'}
            {'/7' 'does not match type integer' '1.5'}
        </errors>
    </test>
    <test>
        <description>Array Keywords</description>
        <matlab>
            {[], [1 2], [1 2 3], [1]}
        </matlab>
        <json>
            [[], [1, 2], [1, 2, 3], [1]]
        </json>
        <schema>
            {
                "type": "array",
                "items": [
                    { "type": "array", "minItems": 1, "maxItems": 2 },
                    { "type": "array", "minItems": 1, "maxItems": 2 },
                    { "type": "array", "minItems": 1, "maxItems": 2 }
                ],
                "additionalItems": false
            }
        </schema>
        <errors>
            {'/0' 'has less than 1 items' '[array]'}
            {'/2' 'has more than 2 items' '[array]'}
            {'' 'does not allow additional items' '[array]'}
        </errors>
    </test>
    <test>
        <description>String Keywords</description>
        <matlab>
            {'fu' 'foo' 'foobar' 'Hello World'}
        </matlab>
        <json>
            ["fu", "foo", "foobar", "Hello World"]
        </json>
        <schema>
            {
                "type": "array",
                "items": [
                    { "type": "string", "minLength": 3, "maxLength": 4 },
                    { "type": "string", "minLength": 3, "maxLength": 4 },
                    { "type": "string", "minLength": 3, "maxLength": 4 },
                    { "type": "string", "pattern": "^\\w+$" }
                ]
            }
        </schema>
        <errors>
            {'/0' 'has length less than 3' 'fu'}
            {'/2' 'has length greater than 4' 'foobar'}
            {'/3' 'does not match pattern ^\w+$' 'Hello World'}
        </errors>
    </test>
    <test>
        <description>Foo2</description>
        <matlab>[1 2]</matlab>
        <schema>
            {
                "type": "object"
            }
        </schema>
        <json>[1, 2]</json>
        <errors>{'' 'does not match type object' '1  2'}</errors>
    </test>
    <test>
        <description>Foo3</description>
        <matlab>'foo'</matlab>
        <schema>
            {
                "type": "number"
            }</schema>
        <json>"foo"</json>
        <errors>{'' 'does not match type number' 'foo'}</errors>
    </test>
    <test>
        <description>Foo4</description>
        <matlab>true</matlab>
        <schema>
            {
                "type": "number"
            }
        </schema>
        <json>true</json>
        <errors>{'' 'does not match type number' 'true'}</errors>
    </test>
    <test>
        <description>Foo4</description>
        <matlab>{'foo'}</matlab>
        <schema>
            {
                "type": "object"
            }
        </schema>
        <json>["foo"]</json>
        <errors>{'' 'does not match type object' '[array]'}</errors>
    </test>
    <test>
        <description>Foo6</description>
        <matlab>'Hello World'</matlab>
        <schema>
            {
                "type": "string",
                "enum": ["foo", "bar"]
            }
        </schema>
        <json>"Hello World"</json>
        <errors>{'' 'is not contained in enumeration' 'Hello World'}</errors>
    </test>
    <test>
        <description>Foo6</description>
        <matlab>4711</matlab>
        <schema>
            {
                "type": "integer",
                "enum": [1, 2, 3, 4]
            }
        </schema>
        <json>4711</json>
        <errors>{'' 'is not contained in enumeration' '4711'}</errors>
    </test>
    <test>
        <description>External Schema</description>
        <matlab>struct('id', '4711', 'bar', 2)</matlab>
        <schema>
            {
                "$ref": "BASE_URI/schema2.json"
            }
        </schema>
        <json>
            {
                "id":"4711",
                "bar":2
            }
        </json>
        <errors>{'/bar' 'does not match type string' '2'}</errors>
    </test>
    <test>
        <description>External Schema</description>
        <matlab>struct('id', '4711', 'bar', 2)</matlab>
        <schema>
            {
                "id": "BASE_URI/",
                "type": "object",
                "properties": {
                    "bar": {
                        "$ref": "schema2.json#/properties/bar"
                    }
                }
            }
        </schema>
        <json>
            {
                "id":"4711",
                "bar":2
            }
        </json>
        <errors>{'/bar' 'does not match type string' '2'}</errors>
    </test>
    <test>
        <description>Internal Schema</description>
        <matlab>struct('id', '4711', 'bar', 2)</matlab>
        <schema>
            {
                "type": "object",
                "properties": {
                    "id": { "type": "string" },
                    "bar": { "$ref": "#/definitions/bar" }
                },
                "definitions": {
                    "bar": { "type": "string" }
                }
            }
        </schema>
        <json>
            {
                "id": "4711",
                "bar": 2
            }
        </json>
        <errors>{'/bar' 'does not match type string' '2'}</errors>
    </test>
    <test>
        <description>additionalProperties</description>
        <matlab>
            {
                struct('id', '4711', 'bar', 2)
                struct('id', '4711', 'bar', 2, 'foo', 'Hello')
            }
        </matlab>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": { "type": "string" },
                        "bar": { "type": "number" }
                    },
                    "additionalProperties": false
                }
            }
        </schema>
        <json>
            [
                {
                    "id":"4711",
                    "bar":2
                },
                {
                    "id":"4711",
                    "bar":2,
                    "foo": "Hello"
                }
            ]
        </json>
        <errors>{'/1' 'contains additional property' 'foo'}</errors>
    </test>
    <test>
        <description>Invalid Reference</description>
        <matlab>struct('id', '4711', 'bar', 2)</matlab>
        <schema>
            {
                "type": "object",
                "properties": {
                    "id": { "type": "string" },
                    "bar": { "$ref": "#/definitions/BAR" }
                },
                "definitions": {
                    "bar": { }
                }
            }
        </schema>
        <json>
            {
                "id": "4711",
                "bar": 2
            }
        </json>
        <errors>{[] 'Invalid $ref at #/properties/bar -> #/definitions/BAR' ''}</errors>
    </test>
    <test>
        <description>Invalid Reference</description>
        <matlab>struct('id', '4711', 'bar', 2)</matlab>
        <schema>
            {
                "type": "object",
                "properties": {
                    "id": { "type": "string" },
                    "bar": { "$ref": 4711 }
                }
            }
        </schema>
        <json>
            {
                "id": "4711",
                "bar": 2
            }
        </json>
        <errors>{[] 'Invalid $ref at #/properties/bar' ''}</errors>
    </test>
    <test>
        <description>Cyclic Schema References</description>
        <matlab>struct('id', '4711', 'bar', 2)</matlab>
        <schema>
            {
                "type": "object",
                "properties": {
                    "id": { "type": "string" },
                    "bar": { "$ref": "#/definitions/barType" }
                },
                "additionalProperties": false,
                "definitions": {
                    "barType": { "$ref": "#/properties/bar" }
                }
            }
        </schema>
        <json>
            {
                "id": "4711",
                "bar": 2
            }
        </json>
        <errors>{[] 'Cyclic references #/properties/bar -> #/definitions/barType -> #/properties/bar' ''}</errors>
    </test>
    <test>
        <description>Format validation on stringify</description>
        <matlab>struct('a', 736330, 'b', 736330.5, 'c', 736330.5, 'd', 'i')</matlab>
        <schema>
            {
                "type": "object",
                "properties": {
                    "a": { "type": "string", "format": "date" },
                    "b": { "$ref": "#/properties/a" },
                    "c": { "type": "string", "format": "date-time" },
                    "d": { "$ref": "#/properties/c" }
                }
            }
        </schema>
        <errors>
            {'/b' 'must be an integer' '736330.5'}
            {'/b' 'does not match type string' '736330.5'}
            {'/d' 'must be a number' 'i'}
        </errors>
    </test>
    <test>
        <description>Format Validation on Parse</description>
        <schema>
            {
                "type": "object",
                "properties": {
                    "a": { "type": "string", "format": "date" },
                    "b": { "type": "string", "format": "date" },
                    "c": { "type": "string", "format": "date-time" },
                    "d": { "type": "string", "format": "date-time" }
                }
            }
        </schema>
        <json>
            {
                "a": "2016-01-01",
                "b": "2016-01-01T12:00:00Z",
                "c": "2016-01-01T12:00:00Z",
                "d": "2016-01-01T12:00:00Y"
            }
        </json>
        <errors>
            {'/b' 'is not a date' '2016-01-01T12:00:00Z'}
            {'/b' 'is not a valid date' '2016-01-01T12:00:00Z'}
            {'/d' 'is not a valid date-time' '2016-01-01T12:00:00Y'}
        </errors>
    </test>
</tests>
