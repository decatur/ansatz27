<?xml version="1.0" encoding="UTF-8"?>
<tests>
    <test>
        <description>Usage</description>
        <matlab>
addpath('lib', 'test');

schema = struct('type', 'object');

[obj, errors] = JSON.parse('file:document.json', 'file:schema.json');
[obj, errors] = JSON.parse('{"foo": 1, "bar": 2}', schema);

obj = containers.Map();
obj('foo') = struct('bar', 13);
obj('bar') = {'foo' 'bar'};

json = JSON.stringify(obj);
[json, errors] = JSON.stringify(obj, 'file:schema.json');
[json, errors] = JSON.stringify(obj, schema);
        </matlab>
    </test>
    <test>
        <description>Formatters</description>
        <matlab>
            stringifier = JSON_Stringifier();
            stringifier.formatters('date') = @(x) JSON_Handler.datenum2string(x);
            stringifier.formatters('date-time') = @(x) JSON_Handler.datetimenum2string(x);
        </matlab>
    </test>
    <test>
        <description>Error Handling</description>
        <matlab>
            [obj, errors] = JSON.parse('{"foo": 1, "bar": 2}', 'file:schema.json');
            if ~isempty(errors)
                % Report errors and stop processing
            end
        </matlab>
    </test>
    <test>
        <description>Structure array</description>
        <matlab>{'foo'}</matlab>
        <schema></schema>
        <json>["foo"]</json>
    </test>
    <test>
        <description>AllOf</description>
        <matlab>struct('id', '4711', 'foo', 2, 'bar', 'DEF_VAL')</matlab>
        <schema>
            {
                "$ref": "schema2.json"
            }
        </schema>
        <json>
            {
                "id":"4711",
                "foo":2
            }
        </json>
    </test>
    <test>
        <description>Structured Array with Defaults</description>
        <matlab>struct('foo', {1 2}, 'bar', {3 4})</matlab>
        <json>
            [ { "foo": 1 }, { "foo": 2, "bar": 4 } ]
        </json>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "foo": {},
                        "bar": { "type": "number", "default": 3 }
                    }
                }
            }
        </schema>
    </test>
    <test>
        <description>Dictionary with Defaults</description>
        <matlab>
            a = containers.Map();
            a('1') = struct('foo', 1, 'bar', 3);
            a('2') = struct('foo', 2, 'bar', 4);
        </matlab>
        <json>
            { 
                "1": { "foo": 1 }, 
                "2": { "foo": 2, "bar": 4 }
            }
        </json>
        <schema>
            {
                "type": "object",
                "format": "Map",
                "patternProperties": {
                    ".*": {
                        "type": "object",
                        "properties": {
                            "foo": {},
                            "bar": { "type": "number", "default": 3 }
                        }
                    }
                }
            }
        </schema>
    </test>
    <test>
        <description>Non-MATLAB Keys</description>
        <json>{ "H@ll@": 1, "$ref": 2 }</json>
        <matlab>struct()</matlab>
    </test>
</tests>
