<?xml version="1.0" encoding="UTF-8"?>
<tests>
    <test>
        <description>Comprehensive Roundtrip Example</description>
        <matlab>
            a = struct('id', '4711');
            a.portfolio.index = 3;
            a.portfolio.value = 4.32;
            a.deals = struct( 'name', {'DEAL-A' 'DEAL-B'}, 'value', {13.13 42.42} );
            a.dealValues = [13.13 42.42];
        </matlab>
        <json>
            {
                "id": "4711",
                "portfolio": {
                    "index": 3,
                    "value": 4.32
                },
                "deals": [
                    { "name": "DEAL-A", "value": 13.13 },
                    { "name": "DEAL-B", "value": 42.42 }
                ],
                "dealValues": [ 13.13, 42.42 ]
            }
        </json>
        <schema>
            {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "portfolio": {
                        "type": "object",
                        "properties": {
                            "index": { "type": "integer", "minimum": 1 },
                            "value": { "type": "number" }
                        }
                    },
                    "deals": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "name":  { "type": "string", "pattern": "^DEAL-\\w+$" },
                                "value": { "type": "number", "minimum": 0 }
                            }
                        }
                    }
                }
            }
        </schema>
    </test>
    <test>
        <description>Schema Inheritance with allOf</description>
        <matlab>
            struct( ...
                'id', '4711', ...
                'foo', 2, ...
                'bar', 'DEF_VAL')
        </matlab>
        <schema>
            {
                "allOf": [
                    {
                        "$ref": "schema2.json"
                    },
                    {
                        "type": "object",
                        "required": ["id"],
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "foo": {
                                "type": "number"
                            }
                        }
                    }
                ]
            }
        </schema>
        <json>
            {
                "id":"4711",
                "foo":2,
                "bar":"DEF_VAL"
            }
        </json>
    </test>
    <test>
        <description>Dictionary</description>
        <matlab>
            a = containers.Map();
            a('DEAL-A')  = struct('start', 736409, 'value', 1);
            a('DEAL-XY') = struct('start', 736410, 'value', 2);
            a('DEAL-Z')  = struct('start', 736411, 'value', 3);
        </matlab>
        <schema>
            {
                "type": "object",
                "format": "Map",
                "patternProperties": {
                    "^DEAL-[A-Z]+$": { 
                        "type": "object",
                        "properties": {
                            "start": { "type": "string", "format": "date" }
                        }
                    }
                }
            }
        </schema>
        <json>
            {
                "DEAL-A" : { "start": "2016-03-20", "value": 1 },
                "DEAL-XY": { "start": "2016-03-21", "value": 2 },
                "DEAL-Z" : { "start": "2016-03-22", "value": 3 }
            }
        </json>
    </test>
    <test>
        <description>Dictionary with Struct</description>
        <matlab>
            a = struct();
            a.DEAL_A  = struct('start', 736409, 'value', 1);
            a.DEAL_XY = struct('start', 736410, 'value', 2);
            a.DEAL_Z  = struct('start', 736411, 'value', 3);
        </matlab>
        <schema>
            {
                "type": "object",
                "patternProperties": {
                    "^DEAL_[A-Z]+$": { 
                        "type": "object",
                        "properties": {
                            "start": { "type": "string", "format": "date" }
                        }
                    }
                }
            }
        </schema>
        <json>
            {
                "DEAL_A" : { "start": "2016-03-20", "value": 1 },
                "DEAL_XY": { "start": "2016-03-21", "value": 2 },
                "DEAL_Z" : { "start": "2016-03-22", "value": 3 }
            }
        </json>
    </test>
    <test>
        <description>Cell Array</description>
        <matlab>{struct('foo', 1) struct('bar', 2)}</matlab>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": "object"
                },
                "format": "cell-array"
            }
        </schema>
        <json>[{"foo":1},{"bar":2}]</json>
    </test>
    <test readme='true'>
        <description>Roundtrip Structured Array</description>
        <matlab>struct('foo', {1 2}, 'bar', {3 4})</matlab>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "foo": {},
                        "bar": {}
                    }
                }
            }
        </schema>
        <json>
            [
                {"foo":1,"bar":3},
                {"foo":2,"bar":4}
            ]
        </json>
    </test>
    <test>
        <description>Ragged structure array</description>
        <matlab>struct('foo', {1 2}, 'bar', {[] 4})</matlab>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "foo": {},
                        "bar": {}
                    },
                    "additionalProperties": false
                }
            }
        </schema>
        <json>
            [
                {"foo":1},
                {"foo":2,"bar":4}
            ]
        </json>
    </test>
    <test>
        <description>Array of strings</description>
        <matlab>{'foo'}</matlab>
        <json>["foo"]</json>
    </test>
    <test>
        <description>Scalar number</description>
        <matlab>1</matlab>
        <schema>
            {
                "type": "number",
                "enum": [1, 2]
            }
        </schema>
        <json>1</json>
    </test>
    <test>
        <description>Scalar boolean</description>
        <matlab>true</matlab>
        <schema>
            {
                "type": "boolean"
            }
        </schema>
        <json>true</json>
    </test>
    <test>
        <description>Null or NaN</description>
        <matlab>NaN</matlab>
        <schema>
            {
                "type": "null"
            }
        </schema>
        <json>null</json>
    </test>
    <test>
        <description>Single string with enumeration</description>
        <matlab>'foo'</matlab>
        <schema>
            {
                "type": "string",
                "enum": ["bar", "foo"]
            }
        </schema>
        <json>"foo"</json>
    </test>
    <test>
        <description>Row vector</description>
        <matlab>[1 2]</matlab>
        <json>[1,2]</json>
    </test>
    <test>
        <description>Mixed array</description>
        <matlab>{1, struct(), 2}</matlab>
        <schema>
            {
                "type": "array",
                "items": {"type": ["number", "object"]}
            }
        </schema>
        <json>[1,{},2]</json>
    </test>
    <test>
        <description>Row vector with NaN</description>
        <matlab>[1 NaN 2]</matlab>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": ["number", "null"]
                }
            }
        </schema>
        <json>[1,null,2]</json>
    </test>
    <test>
        <description>Roundtrip Numeric Matrix</description>
        <matlab>[ [1 2 NaN]; [4 -5 6] ]</matlab>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": "array",
                    "items": {
                        "type": ["number", "null"]
                    }
                }
            }
        </schema>
        <json>[[1,2,null],[4,-5,6]]</json>
    </test>
    <test>
        <description>Simple object</description>
        <matlab>struct('foo', 'bar')</matlab>
        <json>{"foo":"bar"}</json>
    </test>
    <test>
        <description>Empty object, no schema</description>
        <matlab>struct()</matlab>
        <json>{}</json>
    </test>
    <test>
        <description>Empty object</description>
        <matlab>struct()</matlab>
        <schema>{ "type": "object", "properties": {} }</schema>
        <json>{}</json>
    </test>
    <test>
        <description>Cell array</description>
        <matlab>
            {
                struct('foo',1) ...
                struct('foo',2)
            }
        </matlab>
        <json>[{"foo":1},{"foo":2}]</json>
    </test>
    <test>
        <description>Row vector (Fragile)</description>
        <matlab>[1 2]</matlab>
        <json>[1,2]</json>
    </test>
    <test>
        <description>Matrix 2x2 (Fragile)</description>
        <matlab>[1 2;3 4]</matlab>
        <json>[[1,2],[3,4]]</json>
    </test>
    <test>
        <description>Column vector (Fragile)</description>
        <matlab>[1; 2]</matlab>
        <json>[[1],[2]]</json>
    </test>
    <test>
        <description>Array of strings</description>
        <matlab>{'foo' 'bar'}</matlab>
        <json>["foo","bar"]</json>
    </test>
    <test>
        <description>Single number</description>
        <matlab>1</matlab>
        <json>1</json>
    </test>
    <test>
        <description>Single boolean</description>
        <matlab>true</matlab>
        <json>true</json>
    </test>
    <test>
        <description>Single string</description>
        <matlab>'Hello-World'</matlab>
        <json>"Hello-World"</json>
    </test>
    <test>
        <description>Single boolean</description>
        <matlab>true</matlab>
        <json>true</json>
    </test>
    <test>
        <description>Single boolean</description>
        <matlab>false</matlab>
        <json>false</json>
    </test>
    <test>
        <description>Boolean array (Fragile)</description>
        <matlab>[true false]</matlab>
        <json>[true,false]</json>
    </test>
    <test>
        <description>Hint array</description>
        <matlab>1</matlab>
        <schema>
            { "type": "array",
              "items": { "type": ["number", "null"] }
            }
        </schema>
        <json>[1]</json>
    </test>
    <test>
        <description>Hint array of arrays</description>
        <matlab>1</matlab>
        <schema>
            { 
              "type": "array",
              "items": {
                "type": "array",  
                "items": { 
                    "type": ["number", "null"]
                }
              }
            }
        </schema>
        <json>[[1]]</json>
    </test>
    <test>
        <description>Foo</description>
        <matlab>[1 NaN 2]</matlab>
        <schema>
            { 
                "type": "array",
                "items": { 
                    "type": ["number", "null"]
                }
            }
        </schema>
        <json>[1, null, 2]</json>
    </test>
    <test>
        <description>Empty array</description>
        <matlab>[]</matlab>
        <schema>
            { "type": ["array", "null"] }
        </schema>
        <json>[]</json>
    </test>
    <test>
        <description>Roundtrip 3D Matrix</description>
        <matlab>
            a = NaN(2,2,2);
            a(1,:,:) = [1 2; 3 4];
            a(2,:,:) = [5 6; 7 8];
        </matlab>
        <json>
    [
        [ [1,2], [3,4] ],
        [ [5,6], [7,8] ]
    ]
        </json>
    </test>
    <test>
        <description>Foo</description>
        <matlab>[1 NaN]</matlab>
        <schema>
            {
                "type": "array",
                "items": [
                    {
                        "type": "number"
                    }, {
                        "type": "null"
                    }
                ]
            }
        </schema>
        <json>[1,null]</json>
    </test>
    <test>
        <description>From-till-value tripple</description>
        <matlab>
            [   datenum('2016-01-01') ...
                datenum('2016-01-31') ...
                13]
        </matlab>
        <schema>
            {
                "type": "array",
                "items": [
                    {"type": "string", "format": "date"},
                    {"type": "string", "format": "date"},
                    {"type": ["number", "null"] }
                ]
            }
        </schema>
        <json>["2016-01-01","2016-01-31",13]</json>
    </test>
    <test>
        <description>List of From-Fill-Value Tripples</description>
        <matlab>
            [
                [736330 736360 13.13]
                [736361 736389 42.42]
            ]
        </matlab>
        <schema>
            {
                "type": "array",
                "items": {
                    "type": "array",
                    "items": [
                        {"type": "string", "format": "date"},
                        {"type": "string", "format": "date"},
                        {"type": ["number", "null"] }
                    ]
                }
            }
        </schema>
        <json>
            [
                ["2016-01-01", "2016-01-31", 13.13],
                ["2016-02-01", "2016-02-29", 42.42]
            ]
        </json>
    </test>
    <test>
        <description>Foo1</description>
        <matlab>struct('foo', 1)</matlab>
        <schema>
            {
                "type": "object",
                "properties": {
                    "foo": { "type": "array" }
                }
            }
        </schema>
        <json>{"foo":[1]}</json>
    </test>
    <test>
        <description>Foo</description>
        <matlab>'Hello'</matlab>
        <schema>
            {
                "type": "string",
                "pattern": "^\\w+$"
            }
        </schema>
        <json>"Hello"</json>
    </test>
    <test>
        <description>Roundtrip Date Formater</description>
        <matlab>
            struct( ...
                'myDate', 1+datenum('2016-01-02'), ...
                'myDateTime', 1.5+datenum('2016-01-02') ...
            )
        </matlab>
        <schema>
            {
                "type": "object",
                "properties": {
                    "myDate": { 
                        "type": "string",
                        "format": "date"
                    },
                    "myDateTime": { 
                        "type": "string",
                        "format": "date-time"
                    }
                }
            }
        </schema>
        <json>
            {
                "myDate":"2016-01-03",
                "myDateTime":"2016-01-03T12:00:00+01:00"
            }
        </json>
    </test>
    <test>
        <description>Reuse with Schema References</description>
        <matlab>
                struct( ...
                    'shipping_address', ...
                        struct('street_address', '1600 Pennsylvania Avenue NW', 'city', 'Washington', 'state', 'DC'), ...
                    'billing_address', ...
                    struct('street_address', '1st Street SE', 'city', 'Washington', 'state', 'DC'))
        </matlab>
        <schema>
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "definitions": {
                    "address": {
                        "type": "object",
                        "properties": {
                            "street_address": { "type": "string" },
                            "city":           { "type": "string" },
                            "state":          { "type": "string" }
                        },
                        "required": ["street_address", "city", "state"]
                    }
                },
                "type": "object",
                "properties": {
                    "billing_address":  { "$ref": "#/definitions/address" },
                    "shipping_address": { "$ref": "#/definitions/address" }
                }
            }
        </schema>
        <json>
            {
                "shipping_address": {
                    "street_address": "1600 Pennsylvania Avenue NW",
                    "city":           "Washington",
                    "state":          "DC"
                },
                "billing_address": {
                    "street_address": "1st Street SE",
                    "city":           "Washington",
                    "state":          "DC"
                }
            }
        </json>
    </test>
</tests>
